using Photon.Pun;
using Photon.Realtime;
using ExitGames.Client.Photon;

public class BooleanSync : MonoBehaviourPunCallbacks
{
    protected const string BooleanKey = "isDrawing";
    protected const string BooleanKey1 = "isConnected";
    protected const string StringKey = "annotationType";

    //set default values
    void Start()
    {
        // Initialize both booleans to false at the beginning
        setIsDrawing(false);
        setIsConnected(false);
        setAnnotationType("generalCorrection");
    }

    // Set the boolean property
    public void setIsDrawing(bool value)
    {
        Hashtable drawingStatus = new Hashtable
        {
            { BooleanKey, value }
        };
        PhotonNetwork.CurrentRoom.SetCustomProperties(drawingStatus);
    }

    // Get the boolean property
    public bool returnIsDrawing()
    {
        if (PhotonNetwork.CurrentRoom.CustomProperties.TryGetValue(BooleanKey, out var value))
        {
            return (bool)value;
        }
        return false;
    }

    public void setIsConnected(bool value)
    {
        Hashtable networkStatus = new Hashtable
        {
            { BooleanKey1, value }
        };
        PhotonNetwork.CurrentRoom.SetCustomProperties(networkStatus);
    }

    // Get the boolean property
    public bool returnIsConnected()
    {
        if (PhotonNetwork.CurrentRoom.CustomProperties.TryGetValue(BooleanKey1, out var value))
        {
            return (bool)value;
        }
        return false;
    }

    public void setAnnotationType(string name)
    {
        // Update the string in the Hashtable
        Hashtable annotationStatus = new Hashtable
        {
            {StringKey, name }
        };
        PhotonNetwork.CurrentRoom.SetCustomProperties(annotationStatus);
    }

    public string returnAnnotationType()
    {
        if (PhotonNetwork.CurrentRoom.CustomProperties.TryGetValue(StringKey, out var annotationType))
        {
            return (string)annotationType;
        }

        return null;
    }

}